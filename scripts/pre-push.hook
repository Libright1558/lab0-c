#!/usr/bin/env bash

# Validates repository integrity and runs build checks before pushing to master

# Ensure that the common script exists and is readable, then verify it has no
# syntax errors and defines the required function.
common_script="$(dirname "$0")/../../scripts/common.sh"
[ -r "$common_script" ] || { echo "[!] '$common_script' not found or not readable." >&2; exit 1; }
bash -n "$common_script" >/dev/null 2>&1 || { echo "[!] '$common_script' contains syntax errors." >&2; exit 1; }
source "$common_script"
declare -F set_colors >/dev/null 2>&1 || { echo "[!] '$common_script' does not define the required function." >&2; exit 1; }

set_colors

protected_branch='master'
current_branch=$(git symbolic-ref --short HEAD 2>/dev/null || echo "detached")

# Validate repository integrity
# Ensures this is a proper fork of the original lab0-c repository
# Expected commit: 50c5ac53d31adf6baac4f8d3db6b3ce2215fee40
# Author: Jim Huang <jserv.tw@gmail.com>
# Date:   Thu Feb 20 05:20:55 2025 +0800
#    Bump copyright year
validate_repository() {
  local expected_commit="50c5ac53d31adf6baac4f8d3db6b3ce2215fee40"
  local base_commit="0b8be2c15160c216e8b6ec82c99a000e81c0e429"

  # Check if the expected commit exists in history
  if ! git rev-parse --verify "$expected_commit^{commit}" >/dev/null 2>&1; then
    echo -e "${RED}ERROR${NC}: Repository validation failed."
    echo -e "${YELLOW}Expected commit not found:${NC} $expected_commit"
    echo -e "Make sure you forked from https://github.com/sysprog21/lab0-c recently."
    echo ""
    return 1
  fi

  # Verify the commit matches expected pattern
  local commit=$(git rev-list --skip 1 --grep '^Bump copyright' "$base_commit"...HEAD 2>/dev/null || true)
  if [ "$commit" != "$expected_commit" ]; then
    echo -e "${RED}ERROR${NC}: Repository history verification failed."
    echo -e "Make sure you forked from https://github.com/sysprog21/lab0-c recently."
    echo ""
    return 1
  fi

  return 0
}

# Run repository validation
if ! validate_repository; then
  exit 1
fi

# Show helpful hints for common issues
show_hints() {
  echo -e "${YELLOW}Hint${NC}: If Git keeps asking for your password, see:"
  echo -e "      https://docs.github.com/en/get-started/getting-started-with-git/why-is-git-always-asking-for-my-password"
  echo ""
}

# Run build checks for protected branch
run_build_checks() {
  echo -e "${YELLOW}Running pre-push checks for $protected_branch branch...${NC}"
  echo ""

  # Clean previous build artifacts for fresh check
  printf "${YELLOW}Cleaning previous build...${NC}"
  make clean >/dev/null 2>&1 || true
  printf " [ ${GREEN}OK${NC} ]\n"

  printf "${YELLOW}Building project...${NC}"

  # Capture build output for better error reporting
  build_output=$(make 2>&1)
  build_result=$?

  if [ $build_result -ne 0 ]; then
    printf " [ ${RED}FAIL${NC} ]\n"
    echo ""
    echo "Build output:"
    echo "============="
    echo "$build_output" | tail -20
    echo "============="
    echo ""
    echo -e "${RED}Please fix build errors before pushing to $protected_branch${NC}"
    return 1
  fi

  printf " [ ${GREEN}OK${NC} ]\n"

  # Additional checks could be added here
  # For example: basic tests, format checks, etc.

  return 0
}

# Main execution
main() {
  show_hints

  # Check if pushing to protected branch
  if [ "$current_branch" = "$protected_branch" ]; then
    if ! run_build_checks; then
      exit 1
    fi

    echo ""
    echo -e "${GREEN}All pre-push checks passed!${NC}"
    echo -e "${GREEN}Pushing to $protected_branch...${NC}"
    echo ""
  else
    echo -e "${CYAN}Pushing to branch: $current_branch${NC}"
    echo -e "${CYAN}(Pre-push checks are only run for $protected_branch)${NC}"
    echo ""
  fi

  exit 0
}

# Handle script interruption gracefully
trap 'echo -e "\n${YELLOW}Pre-push hook interrupted${NC}"; exit 130' INT TERM

main "$@"
